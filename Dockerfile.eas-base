FROM node:16-alpine AS node-build
FROM python:3.12-alpine3.22
ENV PYTHON_VERSION='3.12'

# Migrate over our desired NodeJS version from the official Docker Node image
# (NodeJS doesn't provide muslc binaries directly, and Alpine's packages only contain one version)
COPY --from=node-build /usr/local/bin/node /usr/local/bin/
COPY --from=node-build /usr/local/lib/node_modules /usr/local/lib/node_modules/
RUN ln -s ../lib/node_modules/npm/bin/npm-cli.js /usr/local/bin/npm && \
    ln -s ../lib/node_modules/npm/bin/npx-cli.js /usr/local/bin/npx

ARG ENVIRONMENT='development'
ARG PIP_DEFAULT_TIMEOUT=1000

# App root required to be ENV due to start.sh script
ENV VENV_ROOT='/venv'
ENV FLASK_APP='application.py'
ENV HOST='hosted'

# Virtual Envs
ENV VENV_UTILS='/venv/emergency-alerts-utils'
ENV VENV_API='/venv/emergency-alerts-api'
ENV VENV_GOVUK='/venv/emergency-alerts-govuk'
ENV VENV_ADMIN='/venv/emergency-alerts-admin'

# Directories
ENV DIR_UTILS='/eas/emergency-alerts-utils'
ENV DIR_API='/eas/emergency-alerts-api'
ENV DIR_GOVUK='/eas/emergency-alerts-govuk'
ENV DIR_ADMIN='/eas/emergency-alerts-admin'

RUN apk add bash curl wget bind-tools make vim unzip git jq aws-cli envsubst

# Some pip packages require binary builds, and pyproj requires proj:
RUN apk add gcc g++ musl-dev libffi-dev proj-util proj-dev

RUN python$PYTHON_VERSION -m venv $VENV_UTILS && . $VENV_UTILS/bin/activate && python$PYTHON_VERSION -m pip install --upgrade pip wheel setuptools
RUN python$PYTHON_VERSION -m venv $VENV_ADMIN
RUN python$PYTHON_VERSION -m venv $VENV_API
RUN python$PYTHON_VERSION -m venv $VENV_GOVUK

# Build emergency-alerts-utils
COPY . $DIR_UTILS
RUN cd $DIR_UTILS && . $VENV_UTILS/bin/activate && make bootstrap
