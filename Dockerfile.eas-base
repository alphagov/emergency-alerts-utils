FROM ubuntu:20.04

ARG DEBIAN_FRONTEND='noninteractive'
ARG ENVIRONMENT='development'
ARG PIP_DEFAULT_TIMEOUT=1000
# App root required to be ENV due to start.sh script
ENV VENV_ROOT='/venv'
ENV SHELL_CONF='/root/.bashrc'
ENV PYTHON_VERSION='3.9'
ENV PYTHON_FULL_VERSION=$PYTHON_VERSION'.16'
ENV NODE_VERSION='v16.14.0'
ENV NVM_VERSION='v0.39.1'
ENV FLASK_APP='application.py'
ENV NOTIFY_LOG_PATH='/var/log/notify.log'
ENV NOTIFY_ENVIRONMENT='decoupled'

# Virtual Envs
ENV VENV_UTILS='/venv/emergency-alerts-utils'
ENV VENV_API='/venv/emergency-alerts-api'
ENV VENV_GOVUK='/venv/emergency-alerts-govuk'
ENV VENV_ADMIN='/venv/emergency-alerts-admin'

# Directories
ENV DIR_UTILS='/eas/emergency-alerts-utils'
ENV DIR_API='/eas/emergency-alerts-api'
ENV DIR_GOVUK='/eas/emergency-alerts-govuk'
ENV DIR_ADMIN='/eas/emergency-alerts-admin'

# Copy the bashrc file and remove command that exits bashrc file if not running interactively.
RUN mv $SHELL_CONF $SHELL_CONF.bak; cat $SHELL_CONF.bak | sed 's/\[ -z "$PS1" \] && return//' > $SHELL_CONF;

# Update OS to latest.
RUN apt-get update -y

# Install commonly used tools, python related pre-reqs, ca-certs and OS tools
RUN apt-get install build-essential \
                    libssl-dev \
                    zlib1g-dev \
                    libbz2-dev \
                    libreadline-dev \
                    libsqlite3-dev \
                    llvm \
                    libncurses5-dev \
                    libncursesw5-dev \
                    xz-utils \
                    tk-dev \
                    libffi-dev \
                    liblzma-dev \
                    python-openssl \
                    libcurl4-openssl-dev \
                    dnsutils \
                    telnet \
                    apt-utils \
                    make \
                    vim \
                    unzip \
                    git \
                    curl \
                    wget \
                    ca-certificates -y --no-install-recommends && \
                    update-ca-certificates

# Install Python.
RUN cd /opt && \
    wget https://www.python.org/ftp/python/$PYTHON_FULL_VERSION/Python-$PYTHON_FULL_VERSION.tgz --no-check-certificate && \
    tar xzvf Python-$PYTHON_FULL_VERSION.tgz && \
    cd Python-$PYTHON_FULL_VERSION && \
    ./configure && \
    make && \
    make install && \
    ln -fs /opt/Python-$PYTHON_FULL_VERSION/Python /usr/bin/python$PYTHON_VERSION

# Install AWS CLI
RUN curl 'https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip' -o 'awscliv2.zip'; unzip 'awscliv2.zip' && \
    ./aws/install;

# Install Node JS with NVM.
RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/$NVM_VERSION/install.sh | bash

# Validate the installation
RUN . $SHELL_CONF && nvm install $NODE_VERSION && nvm use $NODE_VERSION && \
    node --version || echo 'Could not find node version';

RUN python$PYTHON_VERSION -m venv $VENV_UTILS && . $VENV_UTILS/bin/activate && python$PYTHON_VERSION -m pip install --upgrade pip wheel setuptools
RUN python$PYTHON_VERSION -m venv $VENV_ADMIN
RUN python$PYTHON_VERSION -m venv $VENV_API
RUN python$PYTHON_VERSION -m venv $VENV_GOVUK

# Build emergency-alerts-utils
COPY . $DIR_UTILS
RUN cd $DIR_UTILS && . $VENV_UTILS/bin/activate && make bootstrap
